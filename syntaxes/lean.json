{
  "name": "Lean",
  "scopeName": "source.lean",
  "fileTypes": ["lean"],
  "comments": "Lean is full of types; `x < 0` is a type, as are many more complex statements. Highlighting these is probably unhelpful, so we use `meta.type.lean` instead of `entity.name.type.lean` to prevent the type color being used everywhere.",
  "patterns": [
    {"include": "#comments"},
    {
      "comment": "Commands which accept a definition and universe arguments",
      "begin": "\\b(?<!\\.)(inductive|coinductive|structure|theorem|abbreviation|lemma|definition|def|class)\\b\\s+((\\{)([^}]*)(\\}))?",
      "beginCaptures": {
        "1": {"name": "keyword.other.definitioncommand.lean"},
        "2": {"name": "meta.binder.universe.lean"},
        "3": {"name": "punctuation.definition.binder.universe.begin.lean"},
        "4": {"name": "variable.other.constant.universe.lean"},
        "5": {"name": "punctuation.definition.binder.universe.end.lean"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#definitionName"},
        {"match": ","},
        {"include": "#binders"},
        {
          "begin": ":(?!=)", "end": "(?=\\bwith\\b|\\bextends\\b|:=|\\||\\.)",
          "contentName": "meta.type.lean",
          "patterns" : [
            {"include": "#expressions"}
          ]
        }
      ],
      "end": "(?=\\bwith\\b|\\bextends\\b|:=|\\||\\.)",
      "name": "meta.definitioncommand.lean"
    },
    {
      "comment": "Commands which accept a definition",
      "begin": "\\b(?<!\\.)(example|instance)\\b\\s+",
      "beginCaptures": {
        "1": {"name": "keyword.other.definitioncommand.lean"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#definitionName"},
        {"match": ","},
        {"include": "#binders"},
        {
          "begin": ":(?!=)", "end": "(?=:=|\\||\\.)",
          "contentName": "meta.type.lean",
          "patterns" : [
            {"include": "#expressions"}
          ]
        }
      ],
      "end": "(?=:=|\\||\\.)",
      "name": "meta.definitioncommand.lean"
    },
    {
      "comment": "Commands which accept no definition",
      "begin": "\\b(?<!\\.)(axiom|axioms|constant)\\b\\s+(\\{[^}]*\\})?",
      "beginCaptures": {
        "1": {"name": "keyword.other.definitioncommand.lean"}
      },
      "patterns": [
        {"include": "#comments"},
        {"include": "#definitionName"},
        {"match": ","},
        {"include": "#binders"},
        {
          "begin": ":(?!=)", "end": "$",
          "contentName": "meta.type.lean",
          "patterns" : [
            {"include": "#expressions"}
          ]
        }
      ],
      "end": "$",
      "name": "meta.definitioncommand.lean"
    },

    { "begin": "\\battribute\\b\\s*\\[",
      "end": "\\]",
      "patterns": [
        {"include": "#expressions"}
      ],
      "name": "storage.modifier.lean" },
    { "begin": "@\\[",
      "end": "\\]",
      "patterns": [
        {"include": "#expressions"}
      ],
      "name": "storage.modifier.lean"},
    {
      "match": "\\b(?<!\\.)(private|meta|mutual|protected|noncomputable)\\b",
      "name": "keyword.control.definition.modifier.lean"
    },
    { "match": "#print\\s+(def|definition|inductive|instance|structure|axiom|axioms|class)\\b", "name": "keyword.other.command.lean" },
    { "match": "#(print|eval|reduce|check|help|exit|find|where)\\b", "name": "keyword.other.command.lean" },
    {
      "match": "\\b(?<!\\.)(import|export|prelude|theory|definition|def|abbreviation|instance|renaming|hiding|exposing|constant|lemma|theorem|example|open|axiom|inductive|coinductive|with|structure|universe|universes|alias|precedence|reserve|postfix|prefix|infix|infixl|infixr|notation|namespace|section|local|set_option|extends|include|omit|class|classes|instances|raw|run_cmd|restate_axiom)(?!\\.)\\b",
      "name": "keyword.other.lean"
    },
    { "begin": "\\b(?<!\\.)(variable|variables|parameter|parameters|constants)(?!\\.)\\b",
      "end": "(?!$|[\\s\\n]|\\(|\\[|⦃|\\{|--|/-)",
      "beginCaptures": {"1": {"name": "keyword.other.lean"}},
      "comment": "While we could use #abbreviatedBinders here, it's impossible to know whether `variables x y` is legal without knowing if `x` and `y` are keywords.",
      "patterns": [
        {"include": "#comments"},
        {"include": "#binders"}
      ]
    },
    { "include": "#expressions" }
  ],
  "repository": {
    "expressions": {
      "patterns": [
        { "match": "\\b(Prop|Type|Sort)\\b", "name": "storage.type.lean" },
        { "match": "\\b(sorry)\\b", "name": "invalid.illegal.lean" },
        { "begin": "«", "end": "»", "contentName": "entity.name.lean"},
        { "match": "\\b(?<!\\.)(if|then|else)\\b", "name": "keyword.control.lean" },
        {
          "begin": "\"", "end": "\"",
          "beginCaptures": {"0": {"name": "punctuation.definition.string.begin.lean"}},
          "endCaptures": {"0": {"name": "punctuation.definition.string.end.lean"}},
          "name": "string.quoted.double.lean",
          "patterns": [
            {"match": "\\\\[\\\\\"nt']", "name": "constant.character.escape.lean"},
            {"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]", "name": "constant.character.escape.lean"},
            {"match": "\\\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]", "name": "constant.character.escape.lean"}
          ]
        },
        { "name": "string.quoted.single.lean", "match": "'[^\\\\']'" },
        { "name": "string.quoted.single.lean", "match": "'(\\\\(x..|u....|.))'",
          "captures": {"1": {"name": "constant.character.escape.lean"}} },
        {"match": "`+[^\\[(]\\S+", "name": "entity.name.lean"},
        { "match": "\\b([0-9]+|0([xX][0-9a-fA-F]+))\\b", "name": "constant.numeric.lean" },

        {
          "begin": "\\b(?<!\\.)(fun|forall|assume|exists|λ)(?!(?![λΠΣ])[_a-zA-Zα-ωΑ-Ωϊ-ϻἀ-῾℀-⅏𝒜-𝖟0-9'ⁿ-₉ₐ-ₜᵢ-ᵪ])", "end": ",",
          "beginCaptures": {"0": {"name": "keyword.other.lean"}},
          "comment": "Binders to show in blue.",
          "patterns": [
            { "include": "#comments" },
            { "include": "#abbreviatedBinders" }
          ]
        },
        {
          "begin": "(Π|∀|∃|∃!|Σ)", "end": ",",
          "comment": "Note that we restrict ourselves to binders from core lean.",
          "patterns": [
            { "include": "#comments" },
            { "include": "#abbreviatedBinders" }
          ]
        },
        {
          "match": "\\b(?<!\\.)(calc|have|this|match|do|suffices|show|by|in|at|let|from|obtain|haveI)(?!\\.)\\b",
          "name": "keyword.other.lean"
        },
        {
          "match": "\\b(?<!\\.)(begin|end|using)(?!\\.)\\b",
          "name": "keyword.other.lean"
        },
        {
          "begin": "\\(", "end": "\\)",
          "comment": "Type annotations",
          "name": "meta.parens",
          "patterns" : [
            { "begin": ":", "end": "(?=\\))",
              "beginCaptures": {"0": {"name": "punctuation.separator.type.lean"}},
              "contentName": "meta.type.lean",
              "patterns" : [
                {"include": "#expressions"}
              ]
            },
            { "include": "#expressions" }
          ]
        },
        { "include": "#dashComment"},
        { "include": "#blockComment"},
        { "include": "#stringBlock"}
      ]
    },
    "dashComment": {
      "begin": "(--)", "end": "$",
      "beginCaptures": {"0": {"name": "punctuation.definition.comment.lean"}},
      "name": "comment.line.double-dash.lean",
      "patterns": [
        {"include": "source.lean.markdown"}
      ]
    },
    "docComment": {
      "begin": "/--", "end": "-/", "name": "comment.block.documentation.lean",
      "patterns": [
        {"include": "source.lean.markdown"},
        {"include": "#blockComment"}
      ]
    },
    "stringBlock": {
      "begin": "/-\"", "end": "\"-/", "name": "comment.block.string.lean",
      "patterns": [
        {"include": "source.lean.markdown"},
        {"include": "#blockComment"}
      ]
    },
    "modDocComment": {
      "begin": "/-!", "end": "-/", "name": "comment.block.documentation.lean",
      "patterns": [
        {"include": "source.lean.markdown"},
        {"include": "#blockComment"}
      ]
    },
    "blockComment": {
      "begin": "/-", "end": "-/", "name": "comment.block.lean",
      "patterns": [
        {"include": "source.lean.markdown"},
        {"include": "#blockComment"}
      ]
    },
    "comments": {
      "patterns": [
        {"include": "#dashComment"},
        {"include": "#docComment"},
        {"include": "#stringBlock"},
        {"include": "#modDocComment"},
        {"include": "#blockComment"}
      ]
    },
    "definitionName": {
      "comment": "This regex matches the lean3 parser implementation here: https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/util/name.cpp#L28-L56",
      "patterns": [
        { "match": "\\b(?![λΠΣ])[_a-zA-Zα-ωΑ-Ωϊ-ϻἀ-῾℀-⅏𝒜-𝖟](?:(?![λΠΣ])[_a-zA-Zα-ωΑ-Ωϊ-ϻἀ-῾℀-⅏𝒜-𝖟0-9'ⁿ-₉ₐ-ₜᵢ-ᵪ])*",
          "name": "entity.name.function.lean"},
        { "begin": "«", "end": "»", "contentName": "entity.name.function.lean"}
      ]
    },
    "binderName": {
      "patterns": [
        { "match": "\\b(?![λΠΣ])[_a-zA-Zα-ωΑ-Ωϊ-ϻἀ-῾℀-⅏𝒜-𝖟](?:(?![λΠΣ])[_a-zA-Zα-ωΑ-Ωϊ-ϻἀ-῾℀-⅏𝒜-𝖟0-9'ⁿ-₉ₐ-ₜᵢ-ᵪ])*",
          "name": "variable.parameter.lean"},
        { "begin": "«", "end": "»", "contentName": "variable.parameter.lean"}
      ]
    },
    "binders": {
      "comment": "This defined patterns for matching binders surrounded by (), {}, [], and ⦃⦄.",
      "patterns": [
        {
          "begin": "\\(", "end": "\\)",
          "name": "meta.binder.explicit",
          "beginCaptures": {"0": {"name": "punctuation.definition.binder.explicit.begin.lean"}},
          "endCaptures": {"0": {"name": "punctuation.definition.binder.explicit.end.lean"}},
          "patterns" : [
            { "begin": ":", "end": "(?=\\))",
              "beginCaptures": {"0": {"name": "punctuation.separator.type.lean"}},
              "contentName": "meta.type.lean",
              "patterns" : [
                {"include": "#expressions"}
              ]
            },
            { "include": "#binderName" }
          ]
        },
        {
          "begin": "\\{", "end": "\\}",
          "name": "meta.binder.implicit",
          "beginCaptures": {"0": {"name": "punctuation.definition.binder.implicit.begin.lean"}},
          "endCaptures": {"0": {"name": "punctuation.definition.binder.implicit.end.lean"}},
          "patterns" : [
            { "begin": ":", "end": "(?=\\})",
              "beginCaptures": {"0": {"name": "punctuation.separator.type.lean"}},
              "contentName": "meta.type.lean",
              "patterns" : [
                {"include": "#expressions"}
              ]
            },
            { "include": "#binderName" }
          ]
        },
        {
          "begin": "⦃|\\{\\{", "end": "⦄|\\}\\}",
          "name": "meta.binder.semiimplicit",
          "beginCaptures": {"0": {"name": "punctuation.definition.binder.semiimplicit.begin.lean"}},
          "endCaptures": {"0": {"name": "punctuation.definition.binder.semiimplicit.end.lean"}},
          "patterns" : [
            { "begin": ":", "end": "(?=⦄|\\}\\})",
              "beginCaptures": {"0": {"name": "punctuation.separator.type.lean"}},
              "contentName": "meta.type.lean",
              "patterns" : [
                {"include": "#expressions"}
              ]
            },
            { "include": "#binderName" }
          ]
        },
        {
          "begin": "\\[", "end": "\\]",
          "name": "meta.binder.typeclass",
          "beginCaptures": {"0": {"name": "punctuation.definition.binder.typeclass.begin.lean"}},
          "endCaptures": {"0": {"name": "punctuation.definition.binder.typeclass.end.lean"}},
          "patterns" : [
            { "begin": "(?<=\\[)(?=[^\\]]*:)", "end": ":",
              "endCaptures": {"0": {"name": "punctuation.separator.type.lean"}},
              "comment": "This fails to match the instance name on pathological cases like `[where«is the ]» : oops]`, but no one really writes that anyway, right?",
              "patterns" : [
                {"include": "#binderName"}
              ]
            },
            {
              "begin": "", "end": "(?!\\G)",
              "contentName": "meta.type.lean",
              "patterns": [
                { "include": "#expressions" }
              ]
            }
          ]
        }
      ]
    },
    "abbreviatedBinders": {
      "comment": "This extends `#binders` with parenthesis-free binders.",
      "patterns" : [
        { "include": "#binders"},
        { "include": "#binderName" },
        { "begin": ":", "end": "(?=\\,)",
          "beginCaptures": {"0": {"name": "punctuation.separator.type.lean"}},
          "contentName": "meta.type.lean",
          "patterns" : [
            {"include": "#expressions"}
          ]
        }
      ]
    }
  }
}
